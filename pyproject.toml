# -- build

[build-system]
requires = [
  "setuptools>=61",
  "setuptools_scm[toml]>=4.1.0",
  "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "gwpy"
description = "A python package for gravitational-wave astrophysics"
readme = "README.md"
authors = [
  { name = "Duncan Macleod", email = "duncan.macleod@ligo.org" },
]
license = { text = "GPL-3.0-or-later" }
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Astronomy",
  "Topic :: Scientific/Engineering :: Physics",
]

# requirements
requires-python = ">=3.10"
dependencies = [
  "astropy >=6.1.6",
  "dateparser >=1.2.0",
  "dqsegdb2 >=1.3.0",
  "gwdatafind >=1.2.0",
  "gwosc >=0.5.3,<0.8.0a0",
  "h5py >=3.11.0",
  "igwn-segments >=2.0.0",
  "ligotimegps >=1.2.1",
  "matplotlib >=3.7.3",
  "numpy >=1.24.4",
  "packaging >=24.2",
  "python-dateutil >=2.9.0",
  "requests >=2.32.3",
  "scipy >=1.12.0",
  "tqdm >=4.67.0",
  "typing-extensions ; python_version<'3.11'"
]

# dynamic properties set by tools
dynamic = [
  "version",
]

[project.optional-dependencies]
# test suite
test = [
  "pytest >=8.2",
  "pytest-cov >=5.0.0",
  "pytest-freezer",
  "pytest-requires",
  "pytest-rerunfailures",
  "pytest-socket",
  "pytest-xdist",
  "requests-mock",
]
# arrakis I/O
arrakis = [
  "arrakis-python",
]
# astronomy/cosmology calculations
astro = [
  "inspiral-range >=0.9.0",
]
# auth
auth = [
  "gssapi >=1.9.0",
]
# sphinx documentation
docs = [
  "matplotlib >=3.7.0",
  "numpydoc >=0.8.0",
  "Sphinx >=4.4.0",
  "sphinx-automodapi",
  "sphinx-immaterial >=0.7.3",
  "sphinxcontrib-programoutput",
]
# GWF I/O
gwf = [
  "lalsuite ; sys_platform != 'win32'",
]

# development environments
dev = [
  "arrakis-python ; python_version >= '3.10'",
  "ciecplib",
  "gssapi >=1.9.0",
  "inspiral-range >=0.9.0",
  "lalsuite ; sys_platform != 'win32'",
  "lscsoft-glue ; sys_platform != 'win32'",
  "psycopg2 ; sys_platform == 'linux'",
  "pycbc >=1.13.4 ; sys_platform != 'win32'",
  "pymysql",
  "python-ligo-lw >=1.7.0 ; sys_platform != 'win32'",
  "sqlalchemy",
  "uproot >=4.1.5",
]
# GravitySpy
gravityspy = [
  "pandas",
  "psycopg2",
  "sqlalchemy",
]
# HACR
hacr = [
  "pandas",
  "pymysql",
  "sqlalchemy",
]
# Kerberos authentication
kerberos = [
  "gssapi",
]
# Pelican federation data access
pelican = [
  "requests-pelican >=0.2.0",
]
# SciTokens
scitokens = [
  "htgettoken >=2.1",
  "igwn-auth-utils >=1.2.0",
  "requests-scitokens",
  "scitokens >=1.8.0",
]
# SQL
sql = [
  "pandas",
  "sqlalchemy",
]

# conda packages for development
# NOTE: this isn't a valid extra to install with pip
conda = [
  "lxml !=4.9.1 ; sys_platform == 'win32'",
  "python-framel >=8.40.1,!=8.46.0",
  "python-ldas-tools-framecpp >=2.6.9 ; sys_platform != 'win32' and python_version<'3.12'",
  "python-nds2-client >=0.16",
]

[project.scripts]
gwpy-plot = "gwpy.cli.gwpy_plot:main"

[project.urls]
"Bug Tracker" = "https://gitlab.com/gwpy/gwpy/-/issues"
"Discussion Forum" = "https://gwpy.slack.com"
"Documentation" = "https://gwpy.github.io/docs/"
"Source Code" = "https://gitlab.com/gwpy/gwpy"

[tool.setuptools]
license-files = [ "LICENSE" ]

[tool.setuptools.packages.find]
# note: this is only required in CI, which otherwise fails because
#       GHA is creating a temporary directory that setuptools
#       discovers as another top-level package
include = [
  "gwpy*",
]

[tool.setuptools_scm]
write_to = "gwpy/_version.py"
version_scheme = "release-branch-semver"

# -- coverage.py

[tool.coverage.paths]
source = [
  "gwpy/",
  "*/gwpy/",
]

[tool.coverage.report]
exclude_lines = [
  # ignore when asked
  "pragma: no( |-)cover",
  # don't complain about typing blocks
  "if (typing\\.)?TYPE_CHECKING",
]
omit = [
  # don't report coverage for _version.py
  # (generated automatically by setuptools-scm)
  "*/_version.py",
]
# print report with one decimal point
precision = 1

# -- mypy

[tool.mypy]
check_untyped_defs = true
exclude = [
  "^docs/",
  "^examples/",
]
ignore_missing_imports = true

# -- pytest

[tool.pytest.ini_options]
addopts = "-r a"
minversion = "8.1"
filterwarnings = [
  # https://github.com/gwastro/pycbc/pull/3701
  "ignore:`np.int` is a deprecated alias::pycbc..*",
  # https://git.ligo.org/lscsoft/glue/-/merge_requests/69
  "ignore:PY_SSIZE_T_CLEAN will be required",
  # https://github.com/pyreadline/pyreadline/issues/65
  "ignore:Using or importing the ABCs::pyreadline",
  # ignore numpy ndarray size warnings
  "ignore:numpy.ndarray size changed, may indicate binary incompatibility",
  # ignore warnings from distutils.version
  "ignore:distutils Version::matplotlib",
  "ignore:distutils Version::distutils",  # actually setuptools._distutils
  # ignore trapz warnings
  "ignore:`trapz` is deprecated::inspiral_range",
]
xfail_strict = true

# -- ruff

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "ANN003",  # type annotations for **kwargs
  "D203",  # blank line before class docstring
  "D213",  # docstring summary on second line
  "D413",  # blank line after last section
  "ICN001",  # unconventional import alias
  "PLR0913",  # too many arguments
  "SIM108",  # if-else instead of ternary if
  "TID252",  # relative imports
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F401",  # unused-import
  "F403",  # undefined-local-with-import-star
]
"*/tests/*" = [
  "ANN",  # type annotations
  "B904",  # raise from
  "EM101",  # string literal in exception
  "PLR2004",  # magic value used in comparison
  "S101",  # assert
]
"docs/*" = [
  "A",  # builtins
  "ANN",  # type annotations
  "D",  # docstrings
  "INP001",  # implicit namespace package
]
"examples/**.py" = [
  "ANN",  # type annotations
  "E402",  # import location
]
# ignore unused imoports in typing.py helper module
"gwpy/typing.py" = [
  "F401",  # unused-import
]

# -- rstcheck

[tool.rstcheck]
ignore_directives = [
  # matplotlib
  "plot",
  # sphinx
  "include",
  # sphinx.ext.autosummary
  "autoclass",
  "autofunction",
  "automethod",
  "automodule",
  "autosummary",
  # sphinx.ext.ifconfig
  "ifconfig",
  # sphinx-automodapi
  "automodsumm",
  # sphinx-immaterial
  "md-tab-set",
  # sphinx-panels
  "tabbed",
  # sphinxcontrib-programoutput
  "command-output",
]
ignore_roles = [
  # doxylink
  "lal",
  "lalframe",
]
# rstcheck doesn't known about our referenced.txt which is implicitly included
# in all pages via Sphinx's epilog option
ignore_messages = "(Unknown target name:.*|Undefined substitution referenced: .*)"
