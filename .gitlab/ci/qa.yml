# -- Quality Assurance jobs

spec:
  inputs:
    stage:
      default: test
      description: "Pipeline stage in which to add jobs"
      type: string
    project_dir:
      default: "."
      description: "Project directory to scan"
      type: string
    requirements:
      default: ""
      description: "Extra requirements to install with pip"
      type: string
    ruff_options:
      default: ""
      description: "Extra options to pass to ruff check"
      type: string

---

include:
  - component: gitlab.com/components/sast/sast@~latest
    inputs:
      stage: $[[ inputs.stage ]]
      run_advanced_sast: true
    rules:
      - if: '$GITLAB_FEATURES =~ /\bsast_advanced\b/'
  - component: gitlab.com/components/sast/sast@~latest
    inputs:
      stage: $[[ inputs.stage ]]
      run_advanced_sast: false
    rules:
      - if: '$GITLAB_FEATURES !~ /\bsast_advanced\b/'
  - local: .gitlab/ci/rules.yml

.qa:
  extends: .rules_qa_security
  stage: $[[ inputs.stage ]]
  needs: []

gitlab-advanced-sast:
  needs: !reference [.qa, needs]
  rules:
    # skip if we just can't run advanced sast
    - if: '$GITLAB_FEATURES !~ /\bsast_advanced\b/'
      when: never
    - !reference [.qa, rules]

semgrep-sast:
  needs: !reference [.qa, needs]
  rules:
    # skip if we can run advanced sast
    - if: '$GITLAB_FEATURES =~ /\bsast_advanced\b/'
      when: never
    - !reference [.qa, rules]

ruff:
  extends: .qa
  image: python
  script:
    - python -m pip install
          ruff
          $[[ inputs.requirements ]]
    - python -m ruff check
          $[[ inputs.ruff_options ]]
          $[[ inputs.project_dir ]]
          --exit-zero
    - python -m ruff check
          $[[ inputs.ruff_options ]]
          $[[ inputs.project_dir ]]
          --exit-zero
          --output-format gitlab
          --output-file gl-ruff.json
  artifacts:
    reports:
      codequality: gl-ruff.json
