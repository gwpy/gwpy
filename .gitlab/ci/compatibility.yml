# -- Check dependency compatibility
#
# These jobs check that the minimum versions are well specified,
# and that this project is compatible with the new pre-relase
# versions of anything we can find.
#

spec:
  inputs:
    stage:
      default: test
      description: "Pipeline stage in which to add jobs"
      type: string
    pytest_options:
      default: ""
      description: "Extra options to pass to pytest"
      type: string
    minimum_python_version:
      default: "3.9"
      description: "Python version for minimum dependency compatibility check"
      type: string

---

include:
  - local: .gitlab/ci/rules.yml

  # configure minimum dependency compatibility job
  - local: .gitlab/ci/test-job.yml
    inputs:
      stage: $[[ inputs.stage ]]
      job_name: "compat_minimum"
      install_target: "."
      install_extra: "test"
      pip_options: "--upgrade-strategy=only-if-needed"
      pytest_options: $[[ inputs.pytest_options ]]

  # configure experimental dependency compatibility job
  - local: .gitlab/ci/test-job.yml
    inputs:
      stage: $[[ inputs.stage ]]
      job_name: "compat_experimental"
      install_target: "."
      install_extra: "test,dev"
      pip_options: "--upgrade --upgrade-strategy=eager --pre"
      pytest_options: $[[ inputs.pytest_options ]]

  # configure dependency scanning
  - component: gitlab.com/components/dependency-scanning/main@~latest
    inputs:
      # dependency-scanning needs to run _after_ the test job that generated
      # the requirements.txt file
      stage: $[[ inputs.stage ]]
      job_name: "dependency-scanning"

.compat_rules:
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /\[skip compat\]/'
      when: never
    - !reference [.rules_nightly, rules]
    - !reference [.rules_full_test, rules]

# test against the minimum specified requirements
compat_minimum:
  extends:
    - .compat_minimum
    - .compat_rules
  image: python:$[[ inputs.minimum_python_version ]]
  before_script:
    # replace the requirements as follows:
    #    >=X.Y.Z ---> X.Y.Z  (exact pin to minimum)
    #    ^X.Y    ---> ~X.Y    (pin to X.Y.*)
    - sed -i -E
        -e 's/>=/==/'
        -e 's/\^/~/'
        pyproject.toml
    # undo the change to python_requires
    - sed -i -E
        -e 's/requires-python = "==/requires-python = ">=/'
        pyproject.toml
    # use pip-compile to generate requirements.txt for dependency scanning
    - python -m venv .piptools
    - .piptools/bin/python -m pip install pip-tools
    - .piptools/bin/pip-compile
        --extra test
        --output-file requirements.txt
        --verbose
    - rm -rf .piptools
  artifacts:
    paths:
      - .coverage*
      - requirements.txt

# test against latest/pre-release versions
compat_experimental:
  extends:
    - .compat_experimental
    - .compat_rules
  image: python:3.12

# run dependency scanning against minimum specified requirements
# (most likely to highlight issues)
dependency-scanning:
  needs: ["compat_minimum"]
  rules: !reference [.compat_rules, rules]
